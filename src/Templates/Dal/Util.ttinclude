<#@ template hostspecific="True" debug="True" #>
<#@ output extension="cs" #>

<#+
	const string OPENBLOCK = @"\n{\n";
	const string CLOSEBLOCK = @"\n}\n";

	bool IsReadWriteAccessibleProperty(EdmMember member)
	{
		string setter = Accessibility.ForWriteOnlyProperty(member);
		string getter = Accessibility.ForReadOnlyProperty(member);

		return getter != "private" && getter != "protected" && setter != "private" && setter != "protected";
	}

	string PropertyVirtualModifier(string accessibility)
	{
		return accessibility + (accessibility != "private" ? " virtual" : "");
	}

	void BeginNamespace(string namespaceName, CodeGenerationTools code)
	{
		CodeRegion region = new CodeRegion(this);
		if (!String.IsNullOrEmpty(namespaceName))
		{
			
			
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
			PushIndent(CodeRegion.GetIndent(1));
		}
	}

void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    Dictionary<string, bool> alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(StructuralType type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
            continue;

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
            alreadySeen.Add(type.FullName, true);

    }

    return true;
}
#>